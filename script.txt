# Simple variable operations without a relation

# CREATE DATABASE
> create database foo

# CONNECT DATABASE
> connect foo

# CREATE VARIABLE
> create variable a U32 2 3

# WRITE VARIABLE

# SQUARE BRACKETS
> write a values [[[1 2 3] [3 4 5]] [[5 6 7] [7 8 9]]]

# IMPLICIT C COONTIGUOUS
> write a values 1 2 3 3 4 5 5 6 7 7 8 9

# READ VARIABLES
# Like Python
> read a[0:10, 1, 1:3][0]
[3, 4]
[7, 8]
[3, 4]
[7, 8]

> read a[0:10, 1, :2][0]
[3, 4]

> read a[0:10, 1, :2][0][1]
4

> read a[0, 1, :2][0]
3

# CREATE VARIABLE
> create variable b F64 2

# WRITE VALUES FROM ANOTHER VARIABLE
> write b values (read a[0:10, 1, :2])

# BASIC EXPRESSIONS (+, -, /, *)
> write b values ((read a[0:10, 1, :2]) + (read a[0:10, 1, 1:3]))

# Plugins (C)
#
# // Defined in the api
# typedef struct buf_f32 {
#     float* data,
#     size_t len,
#     size_t* shape,
#     size_t rank
# };
# int plugin_run(buf_f32* a, buf_u32* b) {
#   for(int i = 0; i < a->len; ++i) {
#     a->data[i] += b->data[i];
#     emit(5 + a->data[i]);
#   }
# }
# > write b values plugin_run(a[0:10, 1, :2], a[0:10, 1, 1:3])

# Open up a port to write to a continuously
> write a open 8080

# Open up a port to read from a continuously
> read a open 8081

> close 8080
> close 8081

# DELETE - First shape is obvious
> delete a[0]
> delete a[1:2]
> delete a[1]

# DELETE - later shapes are tricky - and change shape
> delete a[:,1] 

# CREATE RELATION - relations "tie" variables together
> create relation bar 
> create variable a U64 2 relation bar
> create variable b F64 relation bar
> create variable c U32 2 2 relation bar

> write a b values [[1 2] [5, 6]] [1 2]
> write [a b] values [[[1 2] 1] [[5 6] 2]]
> write [a b] c values [[[1 2] 1] [[5 6] 2]] [[[1 1] [2 2]] [[6 7] [8 9]]]
> read [a b]
[1 2] 1
[5 6] 2
[1 2] 1
[5 6] 2
[1 2] 1
[5 6] 2

> read a[0] [b c[1,:]]
[1 2]
[5 6]
1 [[1 1] [2 2]]
2 [[6 7] [8 9]]

> read a[0] [b c[1,:]] sortby a[0][1] desc
[5 6]
[1 2]
2 [[6 7] [8 9]]
1 [[1 1] [2 2]]
